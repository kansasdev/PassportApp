<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppDisplayName" xml:space="preserve">
    <value>DocReader</value>
    <comment>Application display name</comment>
  </data>
  <data name="AppDescription" xml:space="preserve">
    <value>DocReader</value>
    <comment>Application description</comment>
  </data>
  <data name="TabbedDetails_PivotItem1.Header" xml:space="preserve">
    <value>Document visualization zone</value>
    <comment>Data taken from personalization page</comment>
  </data>
  <data name="TabbedDetails_PivotItem2.Header" xml:space="preserve">
    <value>Document chip zone</value>
    <comment>Data taken from chip</comment>
  </data>
  <data name="Shell_TabbedDetails.Content" xml:space="preserve">
    <value>Document details</value>
    <comment>Navigation view item name for TabbedDetails</comment>
  </data>
  <data name="Camera_Exception_UnauthorizedAccess" xml:space="preserve">
    <value>The app was denied access to the camera or microphone.</value>
  </data>
  <data name="Camera_Exception_NotSupported" xml:space="preserve">
    <value>No video capture devices found.</value>
  </data>
  <data name="Camera_Exception_InitializationError" xml:space="preserve">
    <value>An error has occurred during camera control initialization.</value>
  </data>
  <data name="Camera_Exception_InitializationCanceled" xml:space="preserve">
    <value>Camera control initialization has been canceled.</value>
  </data>
  <data name="CameraControl_CameraButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name" xml:space="preserve">
    <value>Take a photo</value>
    <comment>Camera control button automation name property</comment>
  </data>
  <data name="CameraControl_CameraButton.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip" xml:space="preserve">
    <value>Take a photo</value>
    <comment>Camera control button automation tooltip property</comment>
  </data>
  <data name="CameraControl_SwitchCameraButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name" xml:space="preserve">
    <value>Switch camera</value>
    <comment>Camera control switch camera button automation name property</comment>
  </data>
  <data name="CameraControl_SwitchCameraButton.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip" xml:space="preserve">
    <value>Switch camera</value>
    <comment>Camera control switch camera button automation tooltip property</comment>
  </data>
  <data name="Shell_Camera.Content" xml:space="preserve">
    <value>Make photo</value>
    <comment>Navigation view item name for Camera</comment>
  </data>
  <data name="Shell_ImageGallery.Content" xml:space="preserve">
    <value>Photos taken</value>
    <comment>Navigation view item name for ImageGallery</comment>
  </data>
  <data name="ExceptionSettingsStorageExtensionsFileNameIsNullOrEmpty" xml:space="preserve">
    <value>File name is null or empty. Specify a valid file name</value>
    <comment>File name is null or empty to save file in settings storage extensions</comment>
  </data>
  <data name="Shell_Settings.Content" xml:space="preserve">
    <value>Configuration</value>
    <comment>Application settings</comment>
  </data>
  <data name="ExceptionEnumToBooleanConverterParameterMustBeAnEnumName" xml:space="preserve">
    <value>parameter must be an Enum name!</value>
    <comment>Parameter must be an Enum name in enum to boolean converter</comment>
  </data>
  <data name="ExceptionEnumToBooleanConverterValueMustBeAnEnum" xml:space="preserve">
    <value>value must be an Enum!</value>
    <comment>Value must be an Enum in enum to boolean converter</comment>
  </data>
  <data name="ExceptionSettingsStorageExtensionsFileNameIsNullOrEmpty1" xml:space="preserve">
    <value>File name is null or empty. Specify a valid file name</value>
    <comment>File name is null or empty to save file in settings storage extensions</comment>
  </data>
  <data name="Settings_About.Text" xml:space="preserve">
    <value>About this application</value>
    <comment>About this application title for Settings</comment>
  </data>
  <data name="Settings_AboutDescription.Text" xml:space="preserve">
    <value>DocReader is an application which allows you to read chip data from passport. You need contactless smart card reader and PassportService up and running. PassportService you may download from my github page. </value>
    <comment>About this application description for Settings</comment>
  </data>
  <data name="Settings_Personalization.Text" xml:space="preserve">
    <value>Personalization</value>
    <comment>Personalization text for Settings</comment>
  </data>
  <data name="Settings_PrivacyTermsLink.Content" xml:space="preserve">
    <value>Privacy Statement</value>
    <comment>Privacy Statement link content for Settings</comment>
  </data>
  <data name="Settings_PrivacyTermsLink.NavigateUri" xml:space="preserve">
    <value>https://YourPrivacyUrlGoesHere/</value>
    <comment>Here is your Privacy Statement url for Settings</comment>
  </data>
  <data name="Settings_Theme.Text" xml:space="preserve">
    <value>Choose Theme</value>
    <comment>Choose theme text for Settings</comment>
  </data>
  <data name="Settings_Theme_Dark.Content" xml:space="preserve">
    <value>Dark</value>
    <comment>Dark theme text for Settings</comment>
  </data>
  <data name="Settings_Theme_Default.Content" xml:space="preserve">
    <value>Windows default</value>
    <comment>Windows default theme text for Settings</comment>
  </data>
  <data name="Settings_Theme_Light.Content" xml:space="preserve">
    <value>Light</value>
    <comment>Light theme text for Settings</comment>
  </data>
  <data name="NoFocusCamera" xml:space="preserve">
    <value>Make good quality photo for OCR impossible for this device</value>
    <comment>Use more advanced camera</comment>
  </data>
  <data name="OCRLanguage" xml:space="preserve">
    <value>Selected language is not supported, online OCR not possible</value>
    <comment>Supported langugages: en-US</comment>
  </data>
  <data name="VIZZoneInFront" xml:space="preserve">
    <value>Put personalization page of document in front of camera</value>
    <comment>Display message about MRZ</comment>
  </data>
  <data name="Settings_Mode.Text" xml:space="preserve">
    <value>Set camera application mode</value>
  </data>
  <data name="HyperlinkButton1.Content" xml:space="preserve">
    <value>jmrtd </value>
  </data>
  <data name="HyperlinkButton1.NavigateUri" xml:space="preserve">
    <value>https://jmrtd.org</value>
  </data>
  <data name="HyperlinkButton2.Content" xml:space="preserve">
    <value>PassportEye</value>
  </data>
  <data name="HyperlinkButton2.NavigateUri" xml:space="preserve">
    <value>https://github.com/konstantint/PassportEye</value>
  </data>
  <data name="JavaPrereqNOK" xml:space="preserve">
    <value>Error checking JAVA prerequisites:</value>
  </data>
  <data name="JavaPrereqOK" xml:space="preserve">
    <value>JAVA prerequisites OK:</value>
  </data>
  <data name="Settings.AboutDescription17.Text" xml:space="preserve">
    <value>Finally, if all inputs are OK - click Make RFID and put passport on reader immediately</value>
  </data>
  <data name="Settings_AboutDescription1.Text" xml:space="preserve">
    <value>PassportService service is crucial for DocReader. DocReader communicates with PassportService where all stuff related with passports are done. PassportService requires to run: jmrtd, PassportEye and HtmlAgility Pack</value>
  </data>
  <data name="Settings_AboutDescription10.Text" xml:space="preserve">
    <value>1. Make sure you have PC with good camera (auto-focus capable device is good enough)</value>
  </data>
  <data name="Settings_AboutDescription11.Text" xml:space="preserve">
    <value>2. Make sure your contactless reader is plugged in PC and PassportService console application is up and running (admin mode)</value>
  </data>
  <data name="Settings_AboutDescription12.Text" xml:space="preserve">
    <value>3. Run DocReader. In settings, tap ON/OFF if you want DocReader to try autocapture of photo. Unfortunately autocapture doesn't work very well</value>
  </data>
  <data name="Settings_AboutDescription13.Text" xml:space="preserve">
    <value>4. Click "Make photo" and then put passport in front of camera - try to fit MRZ zone below yellow line. Remember, OCR used for this application is not perfect - there are more reliable apps out there.</value>
  </data>
  <data name="Settings_AboutDescription14.Text" xml:space="preserve">
    <value>5. After autocapture or after taking photo manually, you are ready to try recognition of MRZ of document.</value>
  </data>
  <data name="Settings_AboutDescription15.Text" xml:space="preserve">
    <value>6. You will be navigated automatically to main page - click "Make OCR" with takes image as input for PassportService OCR feature (powered by PassportEye). </value>
  </data>
  <data name="Settings_AboutDescription16.Text" xml:space="preserve">
    <value>7. Check results of OCR - UPDATE VALUES IF NECCESSARY DateOfBirth, validity date or Passport Number. Check error indicators, which helps you to enter data correctly.</value>
  </data>
  <data name="Settings_AboutDescription18.Text" xml:space="preserve">
    <value>9. After data reading you may take a look on chip data on second tab. More logs are in PassportService directory</value>
  </data>
  <data name="Settings_AboutDescription2.Text" xml:space="preserve">
    <value>Java version 12 - in OpenJDK release - I haven't tested other versions</value>
  </data>
  <data name="Settings_AboutDescription3.Text" xml:space="preserve">
    <value>Python 2.7 or 3.6 or 3.7</value>
  </data>
  <data name="Settings_AboutDescription4.Text" xml:space="preserve">
    <value>Above runtimes are full of wonderful projects. PassportService is using:</value>
  </data>
  <data name="Settings_AboutDescription5.Text" xml:space="preserve">
    <value>Above projects are free but they are licensed - I hope I didn't included something incorrectly. Read these licenses if you want to include them in other projects</value>
  </data>
  <data name="Settings_AboutDescription6.Text" xml:space="preserve">
    <value>PassportEye depends on other libraries like Tesseract OCR, numpy, scipy, matplotlib and scikit-image. </value>
  </data>
  <data name="Settings_AboutDescription7.Text" xml:space="preserve">
    <value>Jmrtd and my implementation of jmrtd are depending on scuba-smartcards, scuba-sc-j2se, jai-imageio-jpeg2000,jai-imageio-core,cert-cvc and BouncyCastle</value>
  </data>
  <data name="Settings_AboutDescription8.Text" xml:space="preserve">
    <value>How to use DocReader</value>
  </data>
  <data name="Settings_AboutDescription9.Text" xml:space="preserve">
    <value>Make sure you have installed PassportService and service is up and running</value>
  </data>
  <data name="Settings_AboutDescription17.Text" xml:space="preserve">
    <value>8. After completing data - click "Read RFID" button and immediately put passport on NFC reader. Wait for results. You may also do RFID without OCR - just enter wanted data manually</value>
  </data>
  <data name="Hyperlink_myButton.Content" xml:space="preserve">
    <value>https://github.com/kansasdev</value>
  </data>
  <data name="Hyperlink_myButton.NavigateUri" xml:space="preserve">
    <value>https://github.com/kansasdev</value>
  </data>
</root>